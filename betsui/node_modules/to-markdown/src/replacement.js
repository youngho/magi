import Node from './node'
var reduce = Array.prototype.reduce
var leadingNewLinesRegExp = /^\n*/
var trailingNewLinesRegExp = /\n*$/

export default function Replacement (node, converters, options) {
  this.node = node
}

Replacement.prototype = {
  toString: function () {
    var _this = this

    return reduce.call(this.childNodes, function (output, node) {
      node = new Node(node)

      var replacement
      switch (node.nodeType) {
        case 3:
          replacement = new TextReplacement(node).toString()
          break
        case 8:
          replacement = new CommentReplacement(node).toString()
          break
        default:
          replacement = new ElementReplacement(node).toString()
      }

      return _this.join(output, replacement)
    }, '')
  },

  join: function (string1, string2) {
    var separator = separatingNewlines(string1, string2)

    // Remove trailing/leading newlines and replace with separator
    string1 = string1.replace(trailingNewLinesRegExp, '')
    string2 = string2.replace(leadingNewLinesRegExp, '')

    return string1 + separator + string2
  }
}

function separatingNewlines (string1, string2) {
  var newlines = [
    string1.match(trailingNewLinesRegExp)[0],
    string2.match(leadingNewLinesRegExp)[0]
  ].sort()

  return newlines[newlines.length - 1]
}
